{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#welcome-the-ml-engineers-blog","title":"Welcome the ML Engineer's Blog","text":""},{"location":"#about-me","title":"About me:","text":"I'm an Artificial Intelligence Engineer with expertise in MLOps. My work encompasses the design of machine learning algorithms and natural language processing (NLP) in a variety of contexts, from industry to academic research. Specialized in Artificial Intelligence, I also hold a Master's degree in Cognitive Sciences and more specifically in Cognitive Dynamics."},{"location":"#i-worked-for","title":"<p> I worked for </p>","text":""},{"location":"blog/","title":"Blog","text":""},{"location":"blog/2024/06/21/s%C3%A9curit%C3%A9-de-vos-codes/","title":"S\u00e9curit\u00e9 de vos codes","text":"<p>La s\u00e9curit\u00e9 avec Bandit, un outil d'analyse de s\u00e9curit\u00e9 de code pour Python.</p> <p>\ud83d\udd0d Pourquoi Bandit ?</p> <p>Analyse automatique : Bandit passe en revue votre code pour d\u00e9tecter les usages courants qui peuvent \u00eatre dangereux pour la s\u00e9curit\u00e9.</p> <p>Int\u00e9gration facile : S'int\u00e8gre dans vos pipelines CI/CD pour des contr\u00f4les de s\u00e9curit\u00e9 continus.</p> <p>Mettre en place Bandit est aussi simple que:</p> <pre><code>\u200bpip install bandit\nbandit -r your_code.py\u200b\n</code></pre> <p>Ajouter \u00e0 un pipeline GitHub Action, \u00e0 la suite des tests unitaires:</p> <pre><code>\u200bname: Security check\u200b\n\u200brun: bandit -r your_code.py\n</code></pre> <p>Vous pouvez aussi l'int\u00e9grer dans un nouveau workflows en ajoutant un nouveau fichier .yml.</p> <p>Jetez un \u0153il \u00e0 l'image jointe pour voir Bandit en action dans un workflow GitHub Actions. Aucune vuln\u00e9rabilit\u00e9 trouv\u00e9e, c'est exactement ce que nous voulons voir !</p> <p></p> <p>Avec Bandit, votre code est surveill\u00e9 pour \u00e9viter les erreurs courantes qui pourraient le compromettre et ce \u00e0 chaque push ! C'est super pratique et cela doit devenir une habitude.</p>"},{"location":"blog/2024/04/21/la-documentation-technique-et-sphinx/","title":"La documentation technique et Sphinx","text":"<p>Ici, je ne vous parlerai pas du README (qui est un guide rapide), mais plut\u00f4t de la documentation technique.</p> <p>Une documentation claire et accessible est aussi cruciale que le code lui-m\u00eame. Elle guide les utilisateurs et les contributeurs, facilitant l'utilisation et la contribution au projet.</p> <p>Voici comment structurer et publier une documentation d'un projet Python, en utilisant Sphinx pour la g\u00e9n\u00e9ration et Read the Docs pour l'h\u00e9bergement.</p> <ol> <li>Structuration du Projet \ud83d\udcc2 </li> </ol> <p> La premi\u00e8re \u00e9tape est d'organiser le projet en suivant les meilleures pratiques, avec des dossiers distincts pour les sources (src/), les tests (tests/), la documentation (docs/) et le script setup.py. Cette structure claire facilite la navigation et la maintenance du projet. (Je ferai un post sur toute cette partie.) </p> <ol> <li>G\u00e9n\u00e9ration de Documentation avec Sphinx \ud83d\udcd6</li> </ol> <p>Sphinx transforme les docstrings en une documentation compl\u00e8te et bien format\u00e9e.</p> <p>Nous utilisons des extensions comme autodoc pour g\u00e9n\u00e9rer automatiquement la documentation \u00e0 partir des docstrings.</p> <p>1/ Nous installons Sphinx :</p> <pre><code>pip install sphinx\n</code></pre> <p>2/ Nous cr\u00e9ons les dossiers d'initialisation :</p> <pre><code>sphinx-quickstart docs\n</code></pre> <p>3/ Nous nous d\u00e9pla\u00e7ons dans docs et nous cr\u00e9ons la documentation :</p> <pre><code>cd docs\nmake html\n</code></pre> <p>Nous pouvons supprimer la documentation avec :  <code>zsh make clean</code></p> <ol> <li>Configuration pour Read the Docs \ud83c\udf10</li> </ol> <p> Avec un fichier .readthedocs.yaml, nous configurons le processus de build sur Read the Docs, en sp\u00e9cifiant la version de Python et les d\u00e9pendances n\u00e9cessaires. Une fois cela fait, rendez-vous sur ReadTheDoc et s\u00e9lectionnez le repo contenant votre projet. Cela assure que la documentation est automatiquement mise \u00e0 jour et accessible en ligne \u00e0 chaque commit. (Vous trouverez un exemple dans l'image de ce post.) </p> <p>Le r\u00e9sultat ? Une documentation en ligne toujours \u00e0 jour, facilement accessible par les utilisateurs et les contributeurs.</p> <p> La documentation ne doit jamais \u00eatre une r\u00e9flexion apr\u00e8s coup dans le d\u00e9veloppement logiciel. Elle est essentielle pour la transparence, l'accessibilit\u00e9 et la r\u00e9ussite \u00e0 long terme d'un projet. <p>"},{"location":"blog/2024/06/21/automatisation-des-tests/","title":"Automatisation des Tests","text":"<p>Vous le savez (enfin j'esp\u00e8re), les tests sont cruciaux pour tous les projets de d\u00e9veloppement. Mais les ex\u00e9cuter manuellement \u00e0 chaque fois ? Pas tr\u00e8s 2024 ! \ud83e\udd16</p> <p>Voici une astuce pour les d\u00e9veloppeurs soucieux d'efficacit\u00e9 : l'int\u00e9gration de Pytest avec GitHub Actions.</p> <p>Pytest est un framework de test pour vos applications Python. Et quand vous combinez cela avec la puissance des GitHub Actions, vous obtenez une suite de tests automatis\u00e9s qui s'ex\u00e9cutent \u00e0 chaque push ou pull request, assurant que vos modifications n'introduisent pas de r\u00e9gressions !</p> <p>Pour configurer une action de base GitHub et ex\u00e9cuter vos tests Pytest, cr\u00e9ez un fichier <code>.github/workflows/python-app.yml</code>\u200b dans votre repo et ajouter votre configuration comme sur mon exemple en photo.</p> <p></p> <p>\ud83d\ude80 Et voil\u00e0 ! Vos tests se lancent automatiquement, vous offrant une tranquillit\u00e9 d'esprit.</p> <p>Je suis persuad\u00e9 que certains d'entre vous utilisent d'autres techniques ou des outils plus performants pour les tests, l'essentiel \u00e9tant de toujours pr\u00e9venir son code de toutes formes de r\u00e9gression !</p>"},{"location":"blog/archive/2024/","title":"2024","text":""},{"location":"blog/category/devops/","title":"DevOps","text":""},{"location":"blog/category/python/","title":"Python","text":""},{"location":"blog/category/security/","title":"Security","text":""},{"location":"blog/category/testing/","title":"Testing","text":""}]}